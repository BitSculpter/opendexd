import { Arguments } from 'yargs';
import { GetMnemonicRequest, GetMnemonicResponse } from '../../proto/opendexrpc_pb';
import { callback, loadXudClient } from '../command';
import { showSeed } from '../utils';

const formatOutput = (response: GetMnemonicResponse.AsObject) => {
  const { seedMnemonicList } = response;

  showSeed(seedMnemonicList);

  // The mnemonic won't be the same as was returned for the `opendex-cli create` call.
  // opendex uses aezeed which is salted with random bytes, opendex does not store the
  // salt or the mnemonic words. Each time opendex regenerates the mnemonic, it
  // uses a new salt so that the mnemonic is different.
  console.log(`
Note that this mnemonic changes each time it is regenerated by opendex, but it \
still restores the same opendex node key and underlying wallets.
`);
};

export const command = 'getmnemonic';

export const describe = 'show the master opendex seed mnemonic';

export const handler = async (argv: Arguments) => {
  (await loadXudClient(argv)).getMnemonic(new GetMnemonicRequest(), callback(argv, formatOutput));
};
